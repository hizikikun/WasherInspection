#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Integrated GitHub Auto-Commit and Data Sync System
- Monitors code changes and automatically commits to GitHub
- Sends training data and comments when changes exceed threshold
- Combines code monitoring with data synchronization
"""

import os
import json
import time
import threading
from datetime import datetime
from github_auto_commit_system import GitHubAutoCommitSystem
from code_training_auto_sync import CodeTrainingAutoSync
from training_data_manager import TrainingDataManager

class IntegratedGitHubSystem:
    def __init__(self):
        """
        Initialize the integrated GitHub system
        """
        self.code_commit_system = GitHubAutoCommitSystem()
        self.data_sync_system = CodeTrainingAutoSync()
        self.training_manager = TrainingDataManager()
        self.running = False
        
        print("[INTEGRATED] Integrated GitHub System initialized")
        print("[INTEGRATED] Monitoring code changes and training data")
    
    def run_code_monitoring(self):
        """Run code monitoring in background thread"""
        try:
            self.code_commit_system.run_monitoring()
        except Exception as e:
            print(f"[CODE-MONITOR] Error: {e}")
    
    def run_data_sync(self):
        """Run data synchronization in background thread"""
        try:
            self.data_sync_system.run_auto_sync()
        except Exception as e:
            print(f"[DATA-SYNC] Error: {e}")
    
    def run_training_monitor(self):
        """Run training data monitoring in background thread"""
        try:
            while self.running:
                # Scan for new training data
                new_files = self.training_manager.scan_training_data()
                
                if new_files:
                    print(f"[TRAINING] Found {len(new_files)} new training files")
                    
                    # Generate comprehensive report
                    report = self.training_manager.generate_training_report()
                    
                    # Export statistics
                    self.training_manager.export_statistics()
                    
                    # Create GitHub issue for training data update
                    self.create_training_issue(report)
                    
                    # Organize training data
                    self.training_manager.organize_by_date()
                
                # Wait before next scan
                time.sleep(300)  # Check every 5 minutes
                
        except Exception as e:
            print(f"[TRAINING-MONITOR] Error: {e}")
    
    def create_training_issue(self, report):
        """Create GitHub issue for training data update"""
        title = f"ðŸ“Š Training Data Update - {report['summary']['total_files']} files"
        
        body = f"""## Training Data Update

**Timestamp**: {report['timestamp']}
**Total Files**: {report['summary']['total_files']}
**Total Size**: {report['summary']['total_size_mb']:.2f} MB
**Classes**: {report['summary']['classes']}

## Class Distribution
"""
        
        for class_name, count in report['class_distribution'].items():
            size_mb = report['class_sizes_mb'][class_name]
            body += f"- **{class_name.title()}**: {count} files ({size_mb:.2f} MB)\n"
        
        body += f"""
## Daily Activity
"""
        
        # Show last 7 days
        sorted_dates = sorted(report['daily_counts'].items(), reverse=True)[:7]
        for date, count in sorted_dates:
            body += f"- **{date}**: {count} files\n"
        
        body += f"""
## Recommendations
"""
        
        for rec in report['recommendations']:
            body += f"- {rec}\n"
        
        body += f"""
## System Status
- **Code Monitoring**: Active
- **Data Sync**: Active
- **Training Monitor**: Active
- **Auto-commit**: Enabled

This report was automatically generated by the integrated GitHub system."""
        
        # Create issue
        self.code_commit_system.create_github_issue(title, body, ["training", "data-update", "automated", "integrated"])
    
    def create_system_status_issue(self):
        """Create system status issue"""
        title = f"ðŸ”„ System Status Report - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        body = f"""## Integrated GitHub System Status

**Timestamp**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Active Components
- âœ… **Code Monitoring**: Active
- âœ… **Data Synchronization**: Active
- âœ… **Training Data Management**: Active
- âœ… **Auto-commit System**: Active

## Configuration
- **Commit Threshold**: {self.code_commit_system.commit_threshold} files
- **Size Threshold**: {self.code_commit_system.size_threshold / 1024:.1f} KB
- **Time Threshold**: {self.code_commit_system.time_threshold} seconds
- **Sync Interval**: {self.data_sync_system.config.get('sync_interval_minutes', 5)} minutes

## Recent Activity
- **Code Changes**: Monitored continuously
- **Training Data**: {self.training_manager.stats['total_files']} files ({self.training_manager.stats['total_size'] / (1024*1024):.1f} MB)
- **Last Sync**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## System Health
- **Status**: ðŸŸ¢ All systems operational
- **Uptime**: Active
- **Error Rate**: 0%

This status report is automatically generated every hour."""
        
        self.code_commit_system.create_github_issue(title, body, ["system-status", "automated", "integrated"])
    
    def run_status_monitor(self):
        """Run status monitoring in background thread"""
        try:
            while self.running:
                # Create status issue every hour
                time.sleep(3600)  # 1 hour
                self.create_system_status_issue()
                
        except Exception as e:
            print(f"[STATUS-MONITOR] Error: {e}")
    
    def run(self):
        """Run the integrated system"""
        print("[INTEGRATED] Starting integrated GitHub system...")
        print("[INTEGRATED] Press Ctrl+C to stop")
        
        self.running = True
        
        # Start code monitoring in background thread
        code_thread = threading.Thread(target=self.run_code_monitoring)
        code_thread.daemon = True
        code_thread.start()
        
        # Start data sync in background thread
        data_thread = threading.Thread(target=self.run_data_sync)
        data_thread.daemon = True
        data_thread.start()
        
        # Start training monitor in background thread
        training_thread = threading.Thread(target=self.run_training_monitor)
        training_thread.daemon = True
        training_thread.start()
        
        # Start status monitor in background thread
        status_thread = threading.Thread(target=self.run_status_monitor)
        status_thread.daemon = True
        status_thread.start()
        
        try:
            # Main loop
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\n[INTEGRATED] Stopping system...")
            self.running = False
            
            # Wait for threads to finish
            code_thread.join(timeout=5)
            data_thread.join(timeout=5)
            training_thread.join(timeout=5)
            status_thread.join(timeout=5)
            
            print("[INTEGRATED] System stopped")
    
    def run_once(self):
        """Run all systems once"""
        print("[INTEGRATED] Running one-time check...")
        
        # Run code monitoring once
        self.code_commit_system.run_once()
        
        # Run data sync once
        self.data_sync_system.run_once()
        
        # Run training data scan
        self.training_manager.scan_training_data()
        report = self.training_manager.generate_training_report()
        self.training_manager.export_statistics()
        
        print("\n[INTEGRATED] One-time check complete")
        print(f"Training data: {report['summary']['total_files']} files, {report['summary']['total_size_mb']:.2f} MB")
    
    def force_commit(self):
        """Force commit all pending changes"""
        print("[INTEGRATED] Force committing all changes...")
        
        # Force commit code changes
        changes, total_size = self.code_commit_system.scan_code_changes()
        if changes:
            self.code_commit_system.process_changes(changes, total_size)
        
        # Force sync training data
        training_files = self.training_manager.scan_training_data()
        if training_files:
            self.data_sync_system.sync_training_data(training_files)
        
        print("[INTEGRATED] Force commit complete")

def main():
    """Main function"""
    import sys
    
    system = IntegratedGitHubSystem()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'once':
            system.run_once()
        elif command == 'force':
            system.force_commit()
        else:
            print("Available commands: once, force")
    else:
        system.run()

if __name__ == "__main__":
    main()
